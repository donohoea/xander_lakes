{"version":3,"sources":["Map.jsx","LakesList.jsx","App.js","serviceWorker.js","index.js"],"names":["Map","props","mapInstance","useRef","lakeLayers","useEffect","lakePerimeterStyle","feature","weight","lakeContourStyle","shade","properties","calc_dep_m","color","onEachFeature","layer","current","pk","on","e","endpoint","a","async","fetch","response","ok","json","jsonResponse","L","geoJSON","style","addTo","console","log","addDepthContours","_northEast","_southWest","lakeName","fitBounds","lat","lng","handleLakeClick","map","tileLayer","attribution","maxZoom","id","accessToken","addGeoJsonLayer","fire","LakeList","useState","list","setList","fetchLakeListData","className","onClick","card","key","data-toggle","data-target","aria-expanded","aria-controls","aria-labelledby","data-parent","lake","App","setLakeName","lakePK","setLakePK","LakesList","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ac8ab171.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport L from \"leaflet\";\nimport \"./Map.css\";\n\nfunction Map(props) {\n  const mapInstance = useRef();\n  const lakeLayers = useRef();\n\n  useEffect(function loadMap() {\n    const addGeoJsonLayer = async endpoint => {\n      try {\n        const response = await fetch(endpoint);\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          L.geoJSON(jsonResponse, {\n            style: lakePerimeterStyle,\n            onEachFeature: onEachFeature\n          }).addTo(mapInstance.current);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    const addDepthContours = async endpoint => {\n      try {\n        const response = await fetch(endpoint);\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          L.geoJSON(jsonResponse, { style: lakeContourStyle }).addTo(\n            mapInstance.current\n          );\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    function lakePerimeterStyle(feature) {\n      return { weight: \"1\" };\n    }\n\n    function lakeContourStyle(feature) {\n      const shade = (115 - feature.properties.calc_dep_m) / 115;\n      const color = `rgb(${51 * shade}, ${136 * shade}, ${255 * shade})`;\n      return { weight: \"0.8\", color: color };\n    }\n\n    function onEachFeature(feature, layer) {\n      lakeLayers.current[feature.properties.pk] = layer;\n\n      //bind click\n      layer.on(\"click\", function(e) {\n        const pk = e[\"target\"][\"feature\"][\"properties\"][\"pk\"];\n        addDepthContours(`/contours/${pk}/geojson`);\n        const { _northEast, _southWest } = e[\"target\"][\"_bounds\"];\n        const lakeName = e[\"target\"][\"feature\"][\"properties\"][\"name\"];\n        mapInstance.current.fitBounds([\n          [_northEast.lat, _northEast.lng],\n          [_southWest.lat, _southWest.lng]\n        ]);\n        props.handleLakeClick(lakeName);\n      });\n    }\n\n    mapInstance.current = L.map(\"map\").fitBounds([[60, -120], [49, -110]]);\n    L.tileLayer(\n      \"https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}\",\n      {\n        attribution:\n          'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        maxZoom: 18,\n        id: \"mapbox/satellite-streets-v11\",\n        accessToken:\n          \"pk.eyJ1IjoiZG9ub2hvZWEiLCJhIjoiY2s1bjJuM3IwMHFiejNrcGZkMDdkMjI3cCJ9.tZiSlH78_0M5q-SYuvC4EA\"\n      }\n    ).addTo(mapInstance.current);\n    lakeLayers.current = [];\n    addGeoJsonLayer(\"/lakes/geojson\");\n  }, []);\n\n  useEffect(\n    function zoomToLake() {\n      if (!props.pk) {\n        mapInstance.current.fitBounds([[60, -120], [49, -110]]);\n        props.handleLakeClick(null);\n      } else {\n        lakeLayers.current[props.pk].fire(\"click\");\n      }\n    },\n    [props.pk]\n  );\n\n  return <div id=\"map\"></div>;\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./LakeList.css\";\n\nconst LakeList = props => {\n  const [list, setList] = useState(null);\n\n  useEffect(function loadLakeList() {\n    async function fetchLakeListData() {\n      try {\n        const response = await fetch(\"/lakes/list\");\n        if (response.ok) {\n          const jsonResponse = await response.json();\n          setList(jsonResponse);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchLakeListData();\n  }, []);\n  if (!list) {\n    return (\n      <div id=\"accordion\">\n        <div className=\"card\" key=\"loading\">\n          <div className=\"card-header p-0\" id=\"loading\">\n            <button className=\"btn btn-dark btn-block\">Loading Lakes...</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div id=\"accordion\">\n      <div>\n        <button\n          className=\"btn btn-dark btn-block m-0\"\n          onClick={() => props.onClick(null)}\n        >\n          All Lakes\n        </button>\n      </div>\n      {list.map(card => (\n        <div className=\"card\" key={card[1]}>\n          <div className=\"card-header p-0\" id={`heading${card[1]}`}>\n            <button\n              className=\"btn btn-dark btn-block collapsed m-0\"\n              data-toggle=\"collapse\"\n              data-target={`#collapse${card[1]}`}\n              aria-expanded=\"false\"\n              aria-controls={`collapse${card[1]}`}\n            >\n              {card[1]}\n            </button>\n          </div>\n          <div\n            id={`collapse${card[1]}`}\n            className=\"collapse\"\n            aria-labelledby={`heading${card[1]}`}\n            data-parent=\"#accordion\"\n          >\n            <div className=\"card-body p-0\">\n              <ul className=\"no-bullet p-0\">\n                {card[0].map(lake => (\n                  <li key={lake[0]}>\n                    <button\n                      className=\"btn btn-light btn-block\"\n                      onClick={() => props.onClick(lake[0])}\n                    >\n                      {lake[1]}\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default LakeList;\n","import React, { useState } from \"react\";\nimport Map from \"./Map\";\nimport LakesList from \"./LakesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [lakeName, setLakeName] = useState(null);\n  const [lakePK, setLakePK] = useState(null);\n  return (\n    <div className=\"row\">\n      <div className=\"col-3 scrollable p-0\">\n        <LakesList onClick={i => setLakePK(i)} />\n      </div>\n      <div className=\"col-9\">\n        <div className=\"row\">\n          <button className=\"btn btn-dark btn-block\">\n            {lakeName ? lakeName : \"Xander's Lakes\"}\n          </button>\n        </div>\n        <div className=\"row\">\n          <Map pk={lakePK} handleLakeClick={lake => setLakeName(lake)}></Map>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}